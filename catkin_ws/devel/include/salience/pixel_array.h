// Generated by gencpp from file salience/pixel_array.msg
// DO NOT EDIT!


#ifndef SALIENCE_MESSAGE_PIXEL_ARRAY_H
#define SALIENCE_MESSAGE_PIXEL_ARRAY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <salience/pixel_index.h>

namespace salience
{
template <class ContainerAllocator>
struct pixel_array_
{
  typedef pixel_array_<ContainerAllocator> Type;

  pixel_array_()
    : array()  {
    }
  pixel_array_(const ContainerAllocator& _alloc)
    : array(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::salience::pixel_index_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::salience::pixel_index_<ContainerAllocator> >::other >  _array_type;
  _array_type array;





  typedef boost::shared_ptr< ::salience::pixel_array_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::salience::pixel_array_<ContainerAllocator> const> ConstPtr;

}; // struct pixel_array_

typedef ::salience::pixel_array_<std::allocator<void> > pixel_array;

typedef boost::shared_ptr< ::salience::pixel_array > pixel_arrayPtr;
typedef boost::shared_ptr< ::salience::pixel_array const> pixel_arrayConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::salience::pixel_array_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::salience::pixel_array_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace salience

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'salience': ['/home/wen/rse/catkin_ws/src/salience/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::salience::pixel_array_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::salience::pixel_array_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::salience::pixel_array_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::salience::pixel_array_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::salience::pixel_array_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::salience::pixel_array_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::salience::pixel_array_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7a196b44641744999a3c0db1593a834d";
  }

  static const char* value(const ::salience::pixel_array_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7a196b4464174499ULL;
  static const uint64_t static_value2 = 0x9a3c0db1593a834dULL;
};

template<class ContainerAllocator>
struct DataType< ::salience::pixel_array_<ContainerAllocator> >
{
  static const char* value()
  {
    return "salience/pixel_array";
  }

  static const char* value(const ::salience::pixel_array_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::salience::pixel_array_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pixel_index[] array\n\
\n\
\n\
================================================================================\n\
MSG: salience/pixel_index\n\
float64 x\n\
float64 y\n\
float64 depth\n\
";
  }

  static const char* value(const ::salience::pixel_array_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::salience::pixel_array_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.array);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct pixel_array_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::salience::pixel_array_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::salience::pixel_array_<ContainerAllocator>& v)
  {
    s << indent << "array[]" << std::endl;
    for (size_t i = 0; i < v.array.size(); ++i)
    {
      s << indent << "  array[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::salience::pixel_index_<ContainerAllocator> >::stream(s, indent + "    ", v.array[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SALIENCE_MESSAGE_PIXEL_ARRAY_H
